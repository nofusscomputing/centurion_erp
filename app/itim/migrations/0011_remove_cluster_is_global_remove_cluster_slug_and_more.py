# Generated by Django 5.1.10 on 2025-08-15 03:21

import access.models.tenancy_abstract
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("access", "0011_remove_entitynotes_model_and_more"),
        ("core", "0024_centurionaudit_centurionmodelnote_and_more"),
        ("itam", "0012_remove_device_is_global_remove_device_slug_and_more"),
        ("itim", "0010_alter_cluster_organization_and_more"),
    ]

    operations = [
        migrations.RemoveField(
            model_name="cluster",
            name="is_global",
        ),
        migrations.RemoveField(
            model_name="cluster",
            name="slug",
        ),
        migrations.RemoveField(
            model_name="clustertype",
            name="is_global",
        ),
        migrations.RemoveField(
            model_name="clustertype",
            name="slug",
        ),
        migrations.RemoveField(
            model_name="port",
            name="is_global",
        ),
        migrations.RemoveField(
            model_name="service",
            name="is_global",
        ),
        migrations.AlterField(
            model_name="cluster",
            name="cluster_type",
            field=models.ForeignKey(
                blank=True,
                help_text="Type of Cluster",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="itim.clustertype",
                verbose_name="Cluster Type",
            ),
        ),
        migrations.AlterField(
            model_name="cluster",
            name="config",
            field=models.JSONField(
                blank=True,
                help_text="Cluster Configuration",
                null=True,
                verbose_name="Configuration",
            ),
        ),
        migrations.AlterField(
            model_name="cluster",
            name="devices",
            field=models.ManyToManyField(
                blank=True,
                help_text="Devices that are deployed upon the cluster.",
                related_name="cluster_device",
                to="itam.device",
                verbose_name="Devices",
            ),
        ),
        migrations.AlterField(
            model_name="cluster",
            name="id",
            field=models.AutoField(
                help_text="ID of the item",
                primary_key=True,
                serialize=False,
                unique=True,
                verbose_name="ID",
            ),
        ),
        migrations.AlterField(
            model_name="cluster",
            name="model_notes",
            field=models.TextField(
                blank=True,
                help_text="Tid bits of information",
                null=True,
                verbose_name="Notes",
            ),
        ),
        migrations.AlterField(
            model_name="cluster",
            name="nodes",
            field=models.ManyToManyField(
                blank=True,
                help_text="Hosts for resource consumption that the cluster is deployed upon",
                related_name="cluster_node",
                to="itam.device",
                verbose_name="Nodes",
            ),
        ),
        migrations.AlterField(
            model_name="cluster",
            name="organization",
            field=models.ForeignKey(
                help_text="Tenant this belongs to",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="+",
                to="access.tenant",
                validators=[
                    access.models.tenancy_abstract.TenancyAbstractModel.validatate_organization_exists
                ],
                verbose_name="Tenant",
            ),
        ),
        migrations.AlterField(
            model_name="cluster",
            name="parent_cluster",
            field=models.ForeignKey(
                blank=True,
                help_text="Parent Cluster for this cluster",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="itim.cluster",
                verbose_name="Parent Cluster",
            ),
        ),
        migrations.AlterField(
            model_name="clustertype",
            name="config",
            field=models.JSONField(
                blank=True,
                help_text="Cluster Type Configuration that is applied to all clusters of this type",
                null=True,
                verbose_name="Configuration",
            ),
        ),
        migrations.AlterField(
            model_name="clustertype",
            name="id",
            field=models.AutoField(
                help_text="ID of the item",
                primary_key=True,
                serialize=False,
                unique=True,
                verbose_name="ID",
            ),
        ),
        migrations.AlterField(
            model_name="clustertype",
            name="model_notes",
            field=models.TextField(
                blank=True,
                help_text="Tid bits of information",
                null=True,
                verbose_name="Notes",
            ),
        ),
        migrations.AlterField(
            model_name="clustertype",
            name="organization",
            field=models.ForeignKey(
                help_text="Tenant this belongs to",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="+",
                to="access.tenant",
                validators=[
                    access.models.tenancy_abstract.TenancyAbstractModel.validatate_organization_exists
                ],
                verbose_name="Tenant",
            ),
        ),
        migrations.AlterField(
            model_name="port",
            name="description",
            field=models.CharField(
                blank=True,
                help_text="Short description of port",
                max_length=80,
                null=True,
                verbose_name="Description",
            ),
        ),
        migrations.AlterField(
            model_name="port",
            name="id",
            field=models.AutoField(
                help_text="ID of the item",
                primary_key=True,
                serialize=False,
                unique=True,
                verbose_name="ID",
            ),
        ),
        migrations.AlterField(
            model_name="port",
            name="model_notes",
            field=models.TextField(
                blank=True,
                help_text="Tid bits of information",
                null=True,
                verbose_name="Notes",
            ),
        ),
        migrations.AlterField(
            model_name="port",
            name="organization",
            field=models.ForeignKey(
                help_text="Tenant this belongs to",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="+",
                to="access.tenant",
                validators=[
                    access.models.tenancy_abstract.TenancyAbstractModel.validatate_organization_exists
                ],
                verbose_name="Tenant",
            ),
        ),
        migrations.AlterField(
            model_name="service",
            name="cluster",
            field=models.ForeignKey(
                blank=True,
                help_text="Cluster the service is assigned to",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="itim.cluster",
                verbose_name="Cluster",
            ),
        ),
        migrations.AlterField(
            model_name="service",
            name="config",
            field=models.JSONField(
                blank=True,
                help_text="Cluster Configuration",
                null=True,
                verbose_name="Configuration",
            ),
        ),
        migrations.AlterField(
            model_name="service",
            name="dependent_service",
            field=models.ManyToManyField(
                blank=True,
                help_text="Services that this service depends upon",
                related_name="dependentservice",
                to="itim.service",
                verbose_name="Dependent Services",
            ),
        ),
        migrations.AlterField(
            model_name="service",
            name="device",
            field=models.ForeignKey(
                blank=True,
                help_text="Device the service is assigned to",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="itam.device",
                verbose_name="Device",
            ),
        ),
        migrations.AlterField(
            model_name="service",
            name="id",
            field=models.AutoField(
                help_text="ID of the item",
                primary_key=True,
                serialize=False,
                unique=True,
                verbose_name="ID",
            ),
        ),
        migrations.AlterField(
            model_name="service",
            name="model_notes",
            field=models.TextField(
                blank=True,
                help_text="Tid bits of information",
                null=True,
                verbose_name="Notes",
            ),
        ),
        migrations.AlterField(
            model_name="service",
            name="organization",
            field=models.ForeignKey(
                help_text="Tenant this belongs to",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="+",
                to="access.tenant",
                validators=[
                    access.models.tenancy_abstract.TenancyAbstractModel.validatate_organization_exists
                ],
                verbose_name="Tenant",
            ),
        ),
        migrations.AlterField(
            model_name="service",
            name="template",
            field=models.ForeignKey(
                blank=True,
                help_text="Template this service uses",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="itim.service",
                verbose_name="Template Name",
            ),
        ),
        migrations.CreateModel(
            name="ClusterAuditHistory",
            fields=[
                (
                    "centurionaudit_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="core.centurionaudit",
                    ),
                ),
                (
                    "model",
                    models.ForeignKey(
                        help_text="Model this history belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="audit_history",
                        to="itim.cluster",
                        verbose_name="Model",
                    ),
                ),
            ],
            options={
                "verbose_name": "Cluster History",
                "verbose_name_plural": "Cluster Histories",
                "db_table": "itim_cluster_audithistory",
                "managed": True,
            },
            bases=("core.centurionaudit",),
        ),
        migrations.CreateModel(
            name="ClusterCenturionModelNote",
            fields=[
                (
                    "centurionmodelnote_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="core.centurionmodelnote",
                    ),
                ),
                (
                    "model",
                    models.ForeignKey(
                        help_text="Model this note belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="itim.cluster",
                        verbose_name="Model",
                    ),
                ),
            ],
            options={
                "verbose_name": "Cluster Note",
                "verbose_name_plural": "Cluster Notes",
                "db_table": "itim_cluster_centurionmodelnote",
                "managed": True,
            },
            bases=("core.centurionmodelnote",),
        ),
        migrations.CreateModel(
            name="ClusterTypeAuditHistory",
            fields=[
                (
                    "centurionaudit_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="core.centurionaudit",
                    ),
                ),
                (
                    "model",
                    models.ForeignKey(
                        help_text="Model this history belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="audit_history",
                        to="itim.clustertype",
                        verbose_name="Model",
                    ),
                ),
            ],
            options={
                "verbose_name": "Cluster Type History",
                "verbose_name_plural": "Cluster Type Histories",
                "db_table": "itim_clustertype_audithistory",
                "managed": True,
            },
            bases=("core.centurionaudit",),
        ),
        migrations.CreateModel(
            name="ClusterTypeCenturionModelNote",
            fields=[
                (
                    "centurionmodelnote_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="core.centurionmodelnote",
                    ),
                ),
                (
                    "model",
                    models.ForeignKey(
                        help_text="Model this note belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="itim.clustertype",
                        verbose_name="Model",
                    ),
                ),
            ],
            options={
                "verbose_name": "Cluster Type Note",
                "verbose_name_plural": "Cluster Type Notes",
                "db_table": "itim_clustertype_centurionmodelnote",
                "managed": True,
            },
            bases=("core.centurionmodelnote",),
        ),
        migrations.CreateModel(
            name="PortAuditHistory",
            fields=[
                (
                    "centurionaudit_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="core.centurionaudit",
                    ),
                ),
                (
                    "model",
                    models.ForeignKey(
                        help_text="Model this history belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="audit_history",
                        to="itim.port",
                        verbose_name="Model",
                    ),
                ),
            ],
            options={
                "verbose_name": "Port History",
                "verbose_name_plural": "Port Histories",
                "db_table": "itim_port_audithistory",
                "managed": True,
            },
            bases=("core.centurionaudit",),
        ),
        migrations.CreateModel(
            name="PortCenturionModelNote",
            fields=[
                (
                    "centurionmodelnote_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="core.centurionmodelnote",
                    ),
                ),
                (
                    "model",
                    models.ForeignKey(
                        help_text="Model this note belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="itim.port",
                        verbose_name="Model",
                    ),
                ),
            ],
            options={
                "verbose_name": "Port Note",
                "verbose_name_plural": "Port Notes",
                "db_table": "itim_port_centurionmodelnote",
                "managed": True,
            },
            bases=("core.centurionmodelnote",),
        ),
        migrations.CreateModel(
            name="ServiceAuditHistory",
            fields=[
                (
                    "centurionaudit_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="core.centurionaudit",
                    ),
                ),
                (
                    "model",
                    models.ForeignKey(
                        help_text="Model this history belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="audit_history",
                        to="itim.service",
                        verbose_name="Model",
                    ),
                ),
            ],
            options={
                "verbose_name": "Service History",
                "verbose_name_plural": "Service Histories",
                "db_table": "itim_service_audithistory",
                "managed": True,
            },
            bases=("core.centurionaudit",),
        ),
        migrations.CreateModel(
            name="ServiceCenturionModelNote",
            fields=[
                (
                    "centurionmodelnote_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="core.centurionmodelnote",
                    ),
                ),
                (
                    "model",
                    models.ForeignKey(
                        help_text="Model this note belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="itim.service",
                        verbose_name="Model",
                    ),
                ),
            ],
            options={
                "verbose_name": "Service Note",
                "verbose_name_plural": "Service Notes",
                "db_table": "itim_service_centurionmodelnote",
                "managed": True,
            },
            bases=("core.centurionmodelnote",),
        ),
    ]
