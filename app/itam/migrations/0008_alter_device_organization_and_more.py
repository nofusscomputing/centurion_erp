# Generated by Django 5.1.5 on 2025-02-09 11:07

import access.models
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('access', '0003_alter_team_organization_organizationnotes_teamnotes'),
        ('core', '0013_alter_manufacturer_organization_and_more'),
        ('itam', '0007_alter_device_uuid'),
    ]

    operations = [
        migrations.AlterField(
            model_name='device',
            name='organization',
            field=models.ForeignKey(help_text='Organization this belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='access.organization', validators=[access.models.tenancy.TenancyObject.validatate_organization_exists], verbose_name='Organization'),
        ),
        migrations.AlterField(
            model_name='devicemodel',
            name='organization',
            field=models.ForeignKey(help_text='Organization this belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='access.organization', validators=[access.models.tenancy.TenancyObject.validatate_organization_exists], verbose_name='Organization'),
        ),
        migrations.AlterField(
            model_name='deviceoperatingsystem',
            name='organization',
            field=models.ForeignKey(help_text='Organization this belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='access.organization', validators=[access.models.tenancy.TenancyObject.validatate_organization_exists], verbose_name='Organization'),
        ),
        migrations.AlterField(
            model_name='devicesoftware',
            name='organization',
            field=models.ForeignKey(help_text='Organization this belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='access.organization', validators=[access.models.tenancy.TenancyObject.validatate_organization_exists], verbose_name='Organization'),
        ),
        migrations.AlterField(
            model_name='devicetype',
            name='organization',
            field=models.ForeignKey(help_text='Organization this belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='access.organization', validators=[access.models.tenancy.TenancyObject.validatate_organization_exists], verbose_name='Organization'),
        ),
        migrations.AlterField(
            model_name='operatingsystem',
            name='organization',
            field=models.ForeignKey(help_text='Organization this belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='access.organization', validators=[access.models.tenancy.TenancyObject.validatate_organization_exists], verbose_name='Organization'),
        ),
        migrations.AlterField(
            model_name='operatingsystemversion',
            name='organization',
            field=models.ForeignKey(help_text='Organization this belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='access.organization', validators=[access.models.tenancy.TenancyObject.validatate_organization_exists], verbose_name='Organization'),
        ),
        migrations.AlterField(
            model_name='software',
            name='organization',
            field=models.ForeignKey(help_text='Organization this belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='access.organization', validators=[access.models.tenancy.TenancyObject.validatate_organization_exists], verbose_name='Organization'),
        ),
        migrations.AlterField(
            model_name='softwarecategory',
            name='organization',
            field=models.ForeignKey(help_text='Organization this belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='access.organization', validators=[access.models.tenancy.TenancyObject.validatate_organization_exists], verbose_name='Organization'),
        ),
        migrations.AlterField(
            model_name='softwareversion',
            name='organization',
            field=models.ForeignKey(help_text='Organization this belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='access.organization', validators=[access.models.tenancy.TenancyObject.validatate_organization_exists], verbose_name='Organization'),
        ),
        migrations.CreateModel(
            name='DeviceModelNotes',
            fields=[
                ('modelnotes_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.modelnotes')),
                ('model', models.ForeignKey(help_text='Model this note belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='itam.devicemodel', verbose_name='Model')),
            ],
            options={
                'verbose_name': 'Device Model Note',
                'verbose_name_plural': 'Device Model Notes',
                'db_table': 'itam_device_mdel_notes',
                'ordering': ['-created'],
            },
            bases=('core.modelnotes',),
        ),
        migrations.CreateModel(
            name='DeviceNotes',
            fields=[
                ('modelnotes_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.modelnotes')),
                ('model', models.ForeignKey(help_text='Model this note belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='itam.device', verbose_name='Model')),
            ],
            options={
                'verbose_name': 'Device Note',
                'verbose_name_plural': 'Device Notes',
                'db_table': 'itam_device_notes',
                'ordering': ['-created'],
            },
            bases=('core.modelnotes',),
        ),
        migrations.CreateModel(
            name='DeviceTypeNotes',
            fields=[
                ('modelnotes_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.modelnotes')),
                ('model', models.ForeignKey(help_text='Model this note belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='itam.devicetype', verbose_name='Model')),
            ],
            options={
                'verbose_name': 'Device Type Note',
                'verbose_name_plural': 'Device TypeNotes',
                'db_table': 'itam_device_type_notes',
                'ordering': ['-created'],
            },
            bases=('core.modelnotes',),
        ),
        migrations.CreateModel(
            name='OperatingSystemNotes',
            fields=[
                ('modelnotes_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.modelnotes')),
                ('model', models.ForeignKey(help_text='Model this note belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='itam.operatingsystem', verbose_name='Model')),
            ],
            options={
                'verbose_name': 'Operating System Note',
                'verbose_name_plural': 'Operating System Notes',
                'db_table': 'itam_operating_system_notes',
                'ordering': ['-created'],
            },
            bases=('core.modelnotes',),
        ),
        migrations.CreateModel(
            name='OperatingSystemVersionNotes',
            fields=[
                ('modelnotes_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.modelnotes')),
                ('model', models.ForeignKey(help_text='Model this note belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='itam.operatingsystemversion', verbose_name='Model')),
            ],
            options={
                'verbose_name': 'Operating System Version Note',
                'verbose_name_plural': 'Operating System Version Notes',
                'db_table': 'itam_operating_system_version_notes',
                'ordering': ['-created'],
            },
            bases=('core.modelnotes',),
        ),
        migrations.CreateModel(
            name='SoftwareCategoryNotes',
            fields=[
                ('modelnotes_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.modelnotes')),
                ('model', models.ForeignKey(help_text='Model this note belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='itam.softwarecategory', verbose_name='Model')),
            ],
            options={
                'verbose_name': 'Software Category Note',
                'verbose_name_plural': 'Software Category Notes',
                'db_table': 'itam_software_category_notes',
                'ordering': ['-created'],
            },
            bases=('core.modelnotes',),
        ),
        migrations.CreateModel(
            name='SoftwareNotes',
            fields=[
                ('modelnotes_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.modelnotes')),
                ('model', models.ForeignKey(help_text='Model this note belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='itam.software', verbose_name='Model')),
            ],
            options={
                'verbose_name': 'Software Note',
                'verbose_name_plural': 'Software Notes',
                'db_table': 'itam_software_notes',
                'ordering': ['-created'],
            },
            bases=('core.modelnotes',),
        ),
        migrations.CreateModel(
            name='SoftwareVersionNotes',
            fields=[
                ('modelnotes_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.modelnotes')),
                ('model', models.ForeignKey(help_text='Model this note belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='itam.softwareversion', verbose_name='Model')),
            ],
            options={
                'verbose_name': 'Software Version Note',
                'verbose_name_plural': 'Software Version Notes',
                'db_table': 'itam_software_version_notes',
                'ordering': ['-created'],
            },
            bases=('core.modelnotes',),
        ),
    ]
